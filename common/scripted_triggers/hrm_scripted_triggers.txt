is_diarch_able_trigger = {
	# You can't possibly manage someone else's realm from prison.
	is_imprisoned = no
	# You'd clearly be preoccupied.
	trigger_if = {
		limit = { exists = involved_activity }
		save_temporary_scope_as = diarch_temp
		involved_activity.activity_location.county.holder = {
			NOR = {
				this = scope:diarch_temp.liege
				NOT = {
					any_liege_or_above = { this = scope:diarch_temp.liege }
				}
			}
		}
	}
	# If you're in a temporary regency for any other reason, you need to chill.
	NOT = { has_diarchy_active_parameter = diarchy_type_is_temporary_regency }

	####
	NOR = {
		has_trait = jariya
		has_court_position = hrm_harem_eunuch_court_position
		has_court_position = hrm_harem_jariya_court_position
	}
	####
}

is_diarch_valid_trigger = {
	# Basics.
	is_alive = yes
	is_adult = yes
	# If you're in an entrenched regency for some reason, you can't manage a regency yourself.
	NOT = { has_diarchy_parameter = diarchy_type_is_entrenched_regency }
	# You need to be mentally & physically sound, to some degree.
	regency_for_personal_reasons_trigger = no
	# Diarchy-specific checks.
	## Viziers.
	trigger_if = {
		limit = {
			liege ?= { has_diarchy_parameter = diarchy_is_vizierate }
		}
		# Must match their liege's gender preference.
		diarch_matches_liege_faith_gender_preference_trigger = yes
		# Viziers aren't big land-owners.
		## Not in this way, at least.
		highest_held_title_tier <= tier_barony
	}
	# We cannot be at war with our liege.
	OR = {
		is_independent_ruler = yes
		AND = {
			exists = liege
			NOT = { is_at_war_with = liege }
		}
	}
	# If you have somehow managed to get invited to/start an activity outside of your realm (e.g., you're the spouse in a grand wedding), then yeah, you forfeit your position.
	NAND = {
		# Is it redundant to check twice?
		## Yes.
		### Do the machine spirits demand this thoroughness of us?
		#### Also yes.
		##### Do not ask why the God-Machine commands it, merely be glad that it commanded it of you.
		is_travelling = yes
		exists = current_travel_plan
		# We check your liege so that you can attend business within the realm easily.
		## Schemes are their own special lil guys so we take care of them separately.
		trigger_if = {
			limit = {
				exists = scope:owner
				exists = scope:target
			}
			travel_would_cause_regency_trigger = { REALM_HOLDER = scope:owner.liege }
		}
		## Else, we're an ordinary, gods-fearing root scope, so use that.
		trigger_else = {
			travel_would_cause_regency_trigger = { REALM_HOLDER = this.liege }
		}
	}
	# Event blocks.
	OR = {
		is_ai = no
		NOT = { has_character_flag = cannot_be_diarch }
	}

	####
	NOR = {
		has_trait = jariya
		has_court_position = hrm_harem_eunuch_court_position
		has_court_position = hrm_harem_jariya_court_position
	}
	####
}

is_available_allow_travelling = {
	is_alive = yes
	is_in_army = no
	is_imprisoned = no
	has_contagious_deadly_disease_trigger = no
	is_incapable = no
	custom_description = {
		text = ALREADY_IN_ACTIVITY
		NOR = {
			exists = involved_activity
			has_variable = homage_liege_scope
			has_character_flag = meditation_character_flag
			has_character_flag = petition_liege_character_flag
			has_character_flag = holding_court_character_flag
			is_being_visited_on_tour_strict = yes
		}
	}
	custom_description = {
		text = ALREADY_PLANNING_ACTIVITY
		NOT = { has_character_flag = planning_an_activity }
	}
	# Variable set within the adventure inspiration events
	NOT = { has_variable = gone_adventuring }

	####
	NOR = {
		has_trait = jariya
		has_court_position = hrm_harem_eunuch_court_position
		has_court_position = hrm_harem_jariya_court_position
	}
	####
}